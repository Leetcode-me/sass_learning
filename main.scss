// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 3


// ========================================
// ملف SASS الأساسي - استيراد الملفات والمتغيرات
// ========================================

// هنا بنستورد ملف تنسيقات اللّياوت عشان يظبط هيكل الصفحة وأجزاء التخطيط
@use "./sass/layout/leyout-page";

// هنا بنستورد تنسيقات صفحة العدّاد أو صفحة معينة خاصة
@use "./sass/pages/count-page";

// هنا بنستورد ملف الألوان، وبنكتب as * عشان نقدر نستخدم المتغيرات بتاعته في الكود على طول من غير ما نكتب اسم الملف قبليها
@use "./sass/variables/color" as *;

// ========================================
// توضيح الفرق بين المتغيرات المحلية والعالمية
// ========================================

// بنعرف متغير لون محلي، يعني مش هيظهر غير في الجزء ده من الكود
$alt-color: #fff;

// بنطبّق المتغير المحلي ده على الكلاس .count
.count {
    background-color: var($alt-color);
}

// ========================================
// تعريف متغير عالمي
// ========================================

// الجزء ده عشان نبيّن إزاي تخلي المتغير متاح في كل الملف
body {
    // الكومنت ده بيقولك لو شيلت !global هيفضل المتغير محلي بس
    // $alt-color: #000; // لو عايز اخلي الون دة جلوبل بكتب جنبو !global

    // هنا بقى عرفنا المتغير كـ جلوبال باستخدام !global يعني ينفع تستخدمه في أي حتة في الملف بعد كده
    $alt-color: #000 !global;
    background-color: var($alt-color); // بنطبّق لون الخلفية باستخدام المتغير الجلوبال
}

// هنا بنستخدم المتغير الجلوبال اللي عرفناه فوق، فـ اللون هيتغير حسب القيمة الجديدة
.count {
    background-color: var($alt-color);
}


// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 4

// ========================================
// استخدام متغيرات الألوان المستوردة
// ========================================

// هنا بنستخدم المتغيرات اللي جايه من ملف الألوان
// as * معناها نقدر نستخدمهم علطول من غير اسم الملف

// بنظبط ألوان الـ sidebar (الشريط الجانبي) باستخدام المتغيرات المستوردة
.sidbar {
    background-color: $main; // لون الخلفية جاي من ملف الألوان
    color: $alt; // لون الخط جاي من ملف الألوان
}

// ========================================
// ميديا كويري باستخدام متغير
// ========================================

// هنا بنعرف متغير بيحدد مقاس الشاشة اللي هنعمل عنده تغيير في التنسيق
$min_width: "min-width: 768px";

// لما الشاشة توصل للمقاس اللي فوق أو أكبر، بنطبق التنسيقات دي
@media ($min_width) {
    .sidbar {
        background-color: $main; // بنغير لون الخلفية
        color: $alt; // بنغير لون الخط
    }
}


// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 5 


// ========================================
// أمثلة على Nesting (التداخل) والوراثة في التنسيق
// ========================================

// كلاس رئيسي اسمه box، جواه عناصر تانية
.box {
    background-color: #000; // خلفية سودا
    color: #fff; // لون الخط أبيض

    // عنصر جواه كلاس .row، يعني ده تنسيق لعناصر جوه الـ box
    .row {
        padding: 20px; // مسافة داخلية
    }

    // عنصر child جواه عناصر كمان
    .child {

        // عنصر inv موجود جوا child
        .inv {
            background-color: #000;
            color: #fff;
        }

        // الـ & معناها بنرجع نكمل على اسم الكلاس الحالي اللي هو .child
        // يعني foll موجودة جوه child
        & .foll {
            background-color: #fff;
            color: #000;
        }
    }
}



// ========================================
// أمثلة على علاقات العناصر المختلفة
// ========================================

// كلاس parent فيه علاقات بين العناصر المختلفة جواه
.parent {

    // > دي معناها تنسيق العناصر اللي جاية مباشرة بعد parent بس، يعني مش أي عنصر child، بس اللي على طول جواه
    >.child {
        font-size: 20px;
    }

    // أي عنصر جواه .test في أي مكان جواه، مش لازم يكون على طول تحته
    .test {
        font-weight: bold; // بنخلي الخط عريض
    }

    // + دي معناها العنصر اللي جاي على طول بعد parent، لو كان p هنطبّق عليه التنسيق ده
    +p {
        font-size: 15px;
    }
}

// ========================================
// أمثلة على استخدام margin مع nested properties
// ========================================

// كلاس sro بيوضح إزاي نستخدم nested properties في margin
// يعني بدل ما نكتب margin: auto; margin-top: 10px; margin-bottom: 15px;
// نقدر نكتب margin: auto { top: 10px; bottom: 15px; }
.sro {
    margin: auto {
        top: 10px; // مسافة من فوق
        bottom: 15px; // مسافة من تحت
    }
}


// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 6


// ========================================
// أمثلة على استخدام Placeholder Selectors (%)
// ========================================

// Placeholder selector - ده مش كلاس عادي، ده template للتنسيقات
// مش هيظهر في CSS النهائي، بس نقدر نستخدمه مع @extend
// ده مفيد عشان نعمل تنسيقات مشتركة بين أكتر من كلاس
%marge-contain {
    margin: 0 auto; // توسيط العنصر أفقياً
    width: 50%; // عرض 50% من العنصر الأب
    background-color: #000; // خلفية سوداء
    color: #fff; // لون النص أبيض
}

// ========================================
// أمثلة على استخدام @extend للوراثة
// ========================================

// كلاس show بيورث كل التنسيقات من %marge-contain
// يعني هياخد margin: 0 auto, width: 50%, background-color: #000, color: #fff
// وبعدين يضيف تنسيقات إضافية
.show {
    @extend %marge-contain; // بنورث كل التنسيقات من placeholder selector

    padding: 20px; // مسافة داخلية
    font-size: larger; // حجم خط أكبر
}

// كلاس product بيورث من placeholder selector وكلاس show معاً
// يعني هياخد كل التنسيقات من الاثنين
.product {
    @extend %marge-contain; // بنورث من placeholder selector

    @extend .show; // بنورث من كلاس show كمان

    font-family: 'Courier New', Courier, monospace; // نوع خط مختلف
}


// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 7

// ========================================
// أمثلة على استخدام Control Directives (@if/@else)
// ========================================

// متغير يحدد لون الخلفية - ممكن نغيره عشان نغير سلوك الكود
$tatoriall : "white";

// كلاس page بيستخدم @if/@else عشان يحدد لون الخلفية حسب قيمة المتغير
// ده مفيد لما عايز تعمل تنسيقات مختلفة حسب شروط معينة
.page {
    @if $tatoriall =="white" {
        background-color: #fff; // لو المتغير = "white" الخلفية هتكون بيضاء
    }

    @else {
        background-color: #000; // لو المتغير مش "white" الخلفية هتكون سوداء
    }
}

// ========================================
// أمثلة على استخدام Conditional Functions (if())
// ========================================

// متغير boolean يحدد إزاي هيظهر العنصر - true يعني مع rounded corners
$rawinded: true;

// كلاس box بيستخدم if() function عشان يحدد التنسيقات حسب قيمة المتغير
// if() function أسهل من @if/@else للقيم البسيطة
.box {
    padding: 10px; // مسافة داخلية ثابتة

    // لو $rawinded = true، border-radius = 10px، لو false = null (مش موجود)
    border-radius: if($rawinded, 10px, null);

    // لو $rawinded = true، border = 1px solid #000، لو false = null (مش موجود)
    border: if($rawinded, 1px solid #000, null);
}





// --------------------------------------------
// --------------------------------------------
// --------------------------------------------
// lessons 8

// ========================================
// أمثلة متقدمة على استخدام Control Directives مع @error
// ========================================

// Placeholder selector للتنسيقات الأساسية للعنصر
// ده template للتنسيقات المشتركة
%marge-contain {
    margin: 0 auto; // توسيط العنصر أفقياً
    width: 50%; // عرض 50% من العنصر الأب
    background-color: #000; // خلفية سوداء
    color: #fff; // لون النص أبيض
}

// ========================================
// تمرين عملي على @if و @else if و @else مع @error
// ========================================

// متغير يحدد اتجاه السهم - ممكن يكون "top", "bottom", "left", "right"
// تغيير هذا المتغير سيغير اتجاه السهم في العنصر
$direction: "right";

// كلاس arrow-div بيوضح إزاي نعمل سهم بأتجاهات مختلفة باستخدام CSS borders
// ويستخدم control directives عشان يحدد اتجاه السهم
.arrow-div {
    @extend %marge-contain; // بنورث التنسيقات الأساسية
    font-size: 20px; // حجم الخط
    display: flex; // نعرض العناصر كـ flexbox
    justify-content: center; // توسيط أفقياً
    align-items: center; // توسيط رأسياً
    width: 300px; // عرض العنصر
    height: 300px; // ارتفاع العنصر
    position: relative; // موضع نسبي عشان نحدد موضع السهم
    margin: 50px auto; // مسافة خارجية وتوسيط

    // Pseudo-element ::before عشان نعمل السهم
    &::before {
        content: ""; // محتوى فارغ
        position: absolute; // موضع مطلق
        border: 20px solid transparent; // حدود شفافة عشان نعمل شكل السهم

        // لو الاتجاه "top" - السهم هيظهر فوق العنصر
        @if $direction =="top" {
            top: -40px; // موضع السهم فوق العنصر
            left: 50%; // توسيط أفقياً
            transform: translateX(-50%); // تحريك للوسط
            border-bottom-color: red; // لون السهم أحمر
        }

        // لو الاتجاه "bottom" - السهم هيظهر تحت العنصر
        @else if $direction =="bottom" {
            bottom: -40px; // موضع السهم تحت العنصر
            left: 50%; // توسيط أفقياً
            transform: translateX(-50%); // تحريك للوسط
            border-top-color: red; // لون السهم أحمر
        }

        // لو الاتجاه "left" - السهم هيظهر يسار العنصر
        @else if $direction =="left" {
            left: -40px; // موضع السهم يسار العنصر
            top: 50%; // توسيط رأسياً
            transform: translateY(-50%); // تحريك للوسط
            border-right-color: red; // لون السهم أحمر
        }

        // لو الاتجاه "right" - السهم هيظهر يمين العنصر
        @else if $direction =="right" {
            right: -40px; // موضع السهم يمين العنصر
            top: 50%; // توسيط رأسياً
            transform: translateY(-50%); // تحريك للوسط
            border-left-color: red; // لون السهم أحمر
        }

        // لو الاتجاه مش صحيح - نعمل error او الشخص كتب حاجة مش مالوفة
        @else {
            @error "this #{$direction} not successfully"; // رسالة خطأ مع قيمة المتغير
        }
    }
}

// ========================================
// أمثلة على استخدام Interpolation في SASS
// ========================================

// Interpolation يعني إدخال قيم المتغيرات داخل النصوص أو أسماء الكلاسات
// ده مفيد عشان نعمل أسماء كلاسات ديناميكية أو نستخدم متغيرات في أماكن مختلفة

// متغيرات عشان نستخدمها في Interpolation
$company: "falcon"; // اسم الشركة
$position: "right"; // موضع العنصر

// كلاس ديناميكي باستخدام Interpolation
// #{$company} هيحط قيمة المتغير "falcon" في اسم الكلاس
// unique-id() هيعمل ID فريد لكل مرة يتم فيها compile الكود
.ad-#{$company}-#{unique-id()} {
    font-size: 20px; // حجم الخط
    background-image: url("imgs/#{$company}.png"); // صورة خلفية باستخدام اسم الشركة
    #{$position}: 0; // موضع العنصر باستخدام متغير
}

// كلاس آخر باستخدام unique-id() فقط
// unique-id() بيضمن إن كل كلاس له اسم فريد
.ad-#{unique-id()} {
    font-weight: bold; // خط عريض
}



